import Toastify from "toastify-js"
import "toastify-js/src/toastify.css"

/**
 * –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
 * @param {number} ms - –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
 * @returns {Promise}
 */
export function delay(ms) {
	return new Promise((resolve) => {
		setTimeout(resolve, ms)
	})
}
export function createSuccessfulToast(text) {
	Toastify({
		text: text ?? "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ üöÄ",
		duration: 3000,
		newWindow: true,
		close: true,
		gravity: "bottom", // `top` or `bottom`
		position: "center", // `left`, `center` or `right`
		stopOnFocus: true, // Prevents dismissing of toast on hover
		className: "toast_success",
		onClick: function () {}, // Callback after click
	}).showToast()
}
/**
 * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–µ –∏–ª–∏ –æ—à–∏–±–∫–µ.
 * –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –∫–ª–∞—Å—Å–æ–º Toastify –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ toastify-js
 * @param {string | undefined} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–º, –±—É–¥–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * @returns {undefined}
 */
export function createErrorToast(text) {
	Toastify({
		text: text ?? "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ü§®",
		duration: 3000,
		newWindow: true,
		close: true,
		gravity: "bottom", // `top` or `bottom`
		position: "center", // `left`, `center` or `right`
		stopOnFocus: true, // Prevents dismissing of toast on hover
		className: "toast_error",
		style: {
			background: "rgba(121,9,9,1)",
		},
		onClick: function () {}, // Callback after click
	}).showToast()
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–µ –∏–ª–∏ –æ—à–∏–±–∫–µ.
 * –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –∫–ª–∞—Å—Å–æ–º Toastify –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ toastify-js
 * @param {any} functionToCheck - –§—É–Ω–∫—Ü–∏—è –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç
 * @returns {boolean}
 */
export function isFunction(functionToCheck) {
	return (
		functionToCheck && {}.toString.call(functionToCheck) === "[object Function]"
	)
}